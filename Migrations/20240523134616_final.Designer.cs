// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tasken2.DBContext;

#nullable disable

namespace Tasken2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240523134616_final")]
    partial class final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tasken2.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurroundingArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Tasken2.Models.Comments", b =>
                {
                    b.Property<int>("commentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentID"), 1L, 1);

                    b.Property<string>("commentText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("commentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("personID")
                        .HasColumnType("int");

                    b.Property<int>("propID")
                        .HasColumnType("int");

                    b.HasKey("commentID");

                    b.HasIndex("personID");

                    b.HasIndex("propID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Tasken2.Models.Person", b =>
                {
                    b.Property<int>("personID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("personID"), 1L, 1);

                    b.Property<string>("accountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("confirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("nationalID")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("nationalIdImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("personID");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("Tasken2.Models.Property", b =>
                {
                    b.Property<int>("propertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("propertyID"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIDBy")
                        .HasColumnType("int");

                    b.Property<int>("HireStatus")
                        .HasColumnType("int");

                    b.Property<int>("probNumberOfRooms")
                        .HasColumnType("int");

                    b.Property<float>("propArea")
                        .HasColumnType("real");

                    b.Property<int>("propFloorNumber")
                        .HasColumnType("int");

                    b.Property<string>("propImage1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propImage2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propImage3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propImage4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propImage5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("propPrice")
                        .HasColumnType("money");

                    b.Property<string>("propRegion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("propStreet")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("propertyID");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatedIDBy");

                    b.ToTable("properties");
                });

            modelBuilder.Entity("Tasken2.Models.PropertyRating", b =>
                {
                    b.Property<int>("propertyRatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("propertyRatingID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("personID")
                        .HasColumnType("int");

                    b.Property<int>("propID")
                        .HasColumnType("int");

                    b.HasKey("propertyRatingID");

                    b.HasIndex("personID");

                    b.HasIndex("propID");

                    b.ToTable("PropertyRatings");
                });

            modelBuilder.Entity("Tasken2.Models.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceFilter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomFilter")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("searchHistories");
                });

            modelBuilder.Entity("Tasken2.Models.Comments", b =>
                {
                    b.HasOne("Tasken2.Models.Person", "Person")
                        .WithMany("Comments")
                        .HasForeignKey("personID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tasken2.Models.Property", "Property")
                        .WithMany("comments")
                        .HasForeignKey("propID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Tasken2.Models.Property", b =>
                {
                    b.HasOne("Tasken2.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tasken2.Models.Person", "CreatedBy")
                        .WithMany("Properties")
                        .HasForeignKey("CreatedIDBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Tasken2.Models.PropertyRating", b =>
                {
                    b.HasOne("Tasken2.Models.Person", "Person")
                        .WithMany("PropertyRatings")
                        .HasForeignKey("personID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tasken2.Models.Property", "Property")
                        .WithMany("PropertyRatings")
                        .HasForeignKey("propID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Tasken2.Models.Person", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Properties");

                    b.Navigation("PropertyRatings");
                });

            modelBuilder.Entity("Tasken2.Models.Property", b =>
                {
                    b.Navigation("PropertyRatings");

                    b.Navigation("comments");
                });
#pragma warning restore 612, 618
        }
    }
}
